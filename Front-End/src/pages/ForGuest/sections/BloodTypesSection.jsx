import React, { useEffect, useState } from 'react';
import { Card, Col, Row, Typography, Spin, Tag, Modal, Descriptions, Space, Divider } from 'antd';
import { 
  HeartOutlined,
  ExclamationCircleOutlined,
  CheckCircleOutlined,
  WarningOutlined,
  InfoCircleOutlined,
  UserOutlined,
  MedicineBoxOutlined,
  SafetyOutlined
} from '@ant-design/icons';
import './style/BloodTypesSection.css';

const { Title, Paragraph, Text } = Typography;

const BloodTypesSection = () => {
  const [bloodTypes, setBloodTypes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedBloodType, setSelectedBloodType] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);

  useEffect(() => {
    const fetchBloodTypes = async () => {
      try {
        const response = await getPublicBloodTypes();
        setBloodTypes(response.data || []);
        console.log('Blood types data loaded:', response.data?.length);
      } catch (error) {
        console.error('Error loading blood types:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchBloodTypes();
  }, []);

  const getBloodTypeStatus = (bloodType) => {
    // Define rare blood types
    const rareBloodTypes = ['AB-', 'B-', 'A-', 'O-'];
    const isRare = rareBloodTypes.includes(bloodType.name);
    
    return {
      status: isRare ? 'hi·∫øm' : 'b√¨nh th∆∞·ªùng',
      color: isRare ? '#ff4d4f' : '#52c41a',
      icon: isRare ? <ExclamationCircleOutlined /> : <CheckCircleOutlined />
    };
  };

  const getBloodTypeDetails = (bloodType) => {
    const details = {
      'A+': {
        frequency: 'Ph·ªï bi·∫øn',
        canDonateTo: ['A+', 'AB+'],
        canReceiveFrom: ['A+', 'A-', 'O+', 'O-'],
        characteristics: 'Nh√≥m m√°u A+ c√≥ kh√°ng nguy√™n A v√† Rh+',
        compatibility: 'T∆∞∆°ng th√≠ch v·ªõi A+ v√† AB+',
        description: 'Nh√≥m m√°u A+ l√† m·ªôt trong nh·ªØng nh√≥m m√°u ph·ªï bi·∫øn nh·∫•t ·ªü Vi·ªát Nam.'
      },
      'A-': {
        frequency: 'Hi·∫øm',
        canDonateTo: ['A+', 'A-', 'AB+', 'AB-'],
        canReceiveFrom: ['A-', 'O-'],
        characteristics: 'Nh√≥m m√°u A- c√≥ kh√°ng nguy√™n A nh∆∞ng kh√¥ng c√≥ Rh+',
        compatibility: 'C√≥ th·ªÉ hi·∫øn cho t·∫•t c·∫£ nh√≥m A v√† AB',
        description: 'Nh√≥m m√°u A- r·∫•t qu√Ω v√¨ c√≥ th·ªÉ hi·∫øn cho nhi·ªÅu nh√≥m m√°u kh√°c.'
      },
      'B+': {
        frequency: 'Ph·ªï bi·∫øn',
        canDonateTo: ['B+', 'AB+'],
        canReceiveFrom: ['B+', 'B-', 'O+', 'O-'],
        characteristics: 'Nh√≥m m√°u B+ c√≥ kh√°ng nguy√™n B v√† Rh+',
        compatibility: 'T∆∞∆°ng th√≠ch v·ªõi B+ v√† AB+',
        description: 'Nh√≥m m√°u B+ ph·ªï bi·∫øn ·ªü ch√¢u √Å v√† Vi·ªát Nam.'
      },
      'B-': {
        frequency: 'Hi·∫øm',
        canDonateTo: ['B+', 'B-', 'AB+', 'AB-'],
        canReceiveFrom: ['B-', 'O-'],
        characteristics: 'Nh√≥m m√°u B- c√≥ kh√°ng nguy√™n B nh∆∞ng kh√¥ng c√≥ Rh+',
        compatibility: 'C√≥ th·ªÉ hi·∫øn cho t·∫•t c·∫£ nh√≥m B v√† AB',
        description: 'Nh√≥m m√°u B- r·∫•t qu√Ω v√† lu√¥n c·∫ßn thi·∫øt.'
      },
      'AB+': {
        frequency: 'Ph·ªï bi·∫øn',
        canDonateTo: ['AB+'],
        canReceiveFrom: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],
        characteristics: 'Nh√≥m m√°u AB+ c√≥ c·∫£ kh√°ng nguy√™n A, B v√† Rh+',
        compatibility: 'Ch·ªâ c√≥ th·ªÉ hi·∫øn cho AB+, nh∆∞ng nh·∫≠n ƒë∆∞·ª£c t·ª´ t·∫•t c·∫£',
        description: 'AB+ l√† "ng∆∞·ªùi nh·∫≠n ph·ªï qu√°t" - c√≥ th·ªÉ nh·∫≠n m√°u t·ª´ t·∫•t c·∫£ nh√≥m.'
      },
      'AB-': {
        frequency: 'R·∫•t hi·∫øm',
        canDonateTo: ['AB+', 'AB-'],
        canReceiveFrom: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],
        characteristics: 'Nh√≥m m√°u AB- c√≥ kh√°ng nguy√™n A, B nh∆∞ng kh√¥ng c√≥ Rh+',
        compatibility: 'C√≥ th·ªÉ hi·∫øn cho AB+ v√† AB-, nh·∫≠n t·ª´ nh√≥m √¢m',
        description: 'AB- l√† nh√≥m m√°u hi·∫øm nh·∫•t, r·∫•t c·∫ßn thi·∫øt trong y t·∫ø.'
      },
      'O+': {
        frequency: 'Ph·ªï bi·∫øn',
        canDonateTo: ['A+', 'B+', 'AB+', 'O+'],
        canReceiveFrom: ['O+', 'O-'],
        characteristics: 'Nh√≥m m√°u O+ kh√¥ng c√≥ kh√°ng nguy√™n A, B nh∆∞ng c√≥ Rh+',
        compatibility: 'C√≥ th·ªÉ hi·∫øn cho t·∫•t c·∫£ nh√≥m d∆∞∆°ng',
        description: 'O+ l√† "ng∆∞·ªùi hi·∫øn ph·ªï qu√°t" cho nh√≥m d∆∞∆°ng.'
      },
      'O-': {
        frequency: 'Hi·∫øm',
        canDonateTo: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],
        canReceiveFrom: ['O-'],
        characteristics: 'Nh√≥m m√°u O- kh√¥ng c√≥ kh√°ng nguy√™n A, B v√† Rh+',
        compatibility: 'C√≥ th·ªÉ hi·∫øn cho t·∫•t c·∫£ nh√≥m m√°u',
        description: 'O- l√† "ng∆∞·ªùi hi·∫øn ph·ªï qu√°t" - c√≥ th·ªÉ hi·∫øn cho t·∫•t c·∫£.'
      }
    };

    return details[bloodType.name] || {
      frequency: 'Kh√¥ng x√°c ƒë·ªãnh',
      canDonateTo: [],
      canReceiveFrom: [],
      characteristics: 'Th√¥ng tin chi ti·∫øt ch∆∞a c√≥',
      compatibility: 'Ch∆∞a c√≥ th√¥ng tin',
      description: bloodType.description || 'Th√¥ng tin chi ti·∫øt v·ªÅ nh√≥m m√°u n√†y.'
    };
  };

  const handleCardClick = (bloodType) => {
    setSelectedBloodType(bloodType);
    setModalVisible(true);
  };

  const handleModalClose = () => {
    setModalVisible(false);
    setSelectedBloodType(null);
  };

  return (
    <div className="blood-types-section">
      <div className="blood-types-background">
        <div className="floating-drop drop-1"></div>
        <div className="floating-drop drop-2"></div>
        <div className="floating-drop drop-3"></div>
      </div>

      <div className="blood-types-container">
        <div className="blood-types-header">
          <Title level={2} className="blood-types-title">
            C√°c <span>nh√≥m m√°u</span> hi·ªán c√≥
          </Title>
          <Paragraph className="blood-types-description">
            Th√¥ng tin v·ªÅ c√°c nh√≥m m√°u t·∫°i ng√¢n h√†ng m√°u
          </Paragraph>
        </div>

        {loading ? (
          <div style={{ textAlign: 'center', padding: '60px' }}>
            <Spin size="large" />
            <div style={{ marginTop: '16px', color: '#666' }}>ƒêang t·∫£i d·ªØ li·ªáu nh√≥m m√°u...</div>
          </div>
        ) : (
          <Row gutter={[24, 24]}>
            {bloodTypes.map((bloodType, index) => {
              const statusInfo = getBloodTypeStatus(bloodType);
              return (
                <Col xs={24} sm={12} lg={6} key={index}>
                  <Card 
                    className="blood-type-card" 
                    hoverable
                    style={{ borderLeft: `4px solid ${statusInfo.color}` }}
                    onClick={() => handleCardClick(bloodType)}
                  >
                    <div className="blood-type-header">
                      <div className="blood-type-icon">
                        ü©∏
                      </div>
                      <div className="blood-type-info">
                        <Title level={3} className="blood-type-name">
                          {bloodType.name}
                        </Title>
                        <Paragraph className="blood-type-full-name">
                          {bloodType.fullName}
                        </Paragraph>
                      </div>
                    </div>

                    <div className="blood-type-status">
                      <Tag 
                        color={statusInfo.color}
                        icon={statusInfo.icon}
                        className="urgency-tag"
                      >
                        {statusInfo.status}
                      </Tag>
                    </div>

                    <div className="blood-type-description">
                      <Paragraph style={{ fontSize: '12px', color: '#666', margin: 0 }}>
                        {bloodType.description}
                      </Paragraph>
                    </div>

                    <div style={{ textAlign: 'center', marginTop: '12px' }}>
                      <Text style={{ fontSize: '12px', color: '#999' }}>
                        <InfoCircleOutlined /> Click ƒë·ªÉ xem chi ti·∫øt
                      </Text>
                    </div>
                  </Card>
                </Col>
              );
            })}
          </Row>
        )}

        <div className="blood-types-footer">
          <Paragraph style={{ textAlign: 'center', color: '#666', marginTop: '40px' }}>
            üí° <strong>Ghi ch√∫:</strong> Th√¥ng tin ƒë∆∞·ª£c c·∫≠p nh·∫≠t li√™n t·ª•c t·ª´ c√°c ng√¢n h√†ng m√°u tr√™n to√†n qu·ªëc
          </Paragraph>
        </div>
      </div>

      {/* Blood Type Detail Modal */}
      <Modal
        title={
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <span style={{ fontSize: '24px' }}>ü©∏</span>
            <span>Chi ti·∫øt nh√≥m m√°u {selectedBloodType?.name}</span>
          </div>
        }
        open={modalVisible}
        onCancel={handleModalClose}
        footer={null}
        width={800}
        centered
      >
        {selectedBloodType && (
          <div>
            <div style={{ marginBottom: '24px' }}>
              <Space align="center" style={{ marginBottom: '16px' }}>
                <Title level={3} style={{ margin: 0 }}>
                  {selectedBloodType.name} - {selectedBloodType.fullName}
                </Title>
                <Tag 
                  color={getBloodTypeStatus(selectedBloodType).color}
                  icon={getBloodTypeStatus(selectedBloodType).icon}
                >
                  {getBloodTypeStatus(selectedBloodType).status}
                </Tag>
              </Space>
              <Paragraph style={{ fontSize: '16px', color: '#666' }}>
                {getBloodTypeDetails(selectedBloodType).description}
              </Paragraph>
            </div>

            <Divider />

            <Descriptions 
              title="Th√¥ng tin chi ti·∫øt" 
              bordered 
              column={1}
              size="middle"
            >
              <Descriptions.Item label="T·∫ßn su·∫•t xu·∫•t hi·ªán">
                <Text strong>{getBloodTypeDetails(selectedBloodType).frequency}</Text>
              </Descriptions.Item>
              
              <Descriptions.Item label="ƒê·∫∑c ƒëi·ªÉm">
                <Text>{getBloodTypeDetails(selectedBloodType).characteristics}</Text>
              </Descriptions.Item>
              
              <Descriptions.Item label="T√≠nh t∆∞∆°ng th√≠ch">
                <Text>{getBloodTypeDetails(selectedBloodType).compatibility}</Text>
              </Descriptions.Item>
            </Descriptions>

            <Divider />

            <Row gutter={[16, 16]}>
              <Col span={12}>
                <Card 
                  size="small" 
                  title={
                    <Space>
                      <UserOutlined style={{ color: '#52c41a' }} />
                      <span>C√≥ th·ªÉ hi·∫øn cho</span>
                    </Space>
                  }
                  style={{ borderColor: '#52c41a' }}
                >
                  <Space direction="vertical" style={{ width: '100%' }}>
                    {getBloodTypeDetails(selectedBloodType).canDonateTo.map((type, index) => (
                      <Tag key={index} color="green" style={{ margin: '2px' }}>
                        {type}
                      </Tag>
                    ))}
                  </Space>
                </Card>
              </Col>
              
              <Col span={12}>
                <Card 
                  size="small" 
                  title={
                    <Space>
                      <MedicineBoxOutlined style={{ color: '#1890ff' }} />
                      <span>C√≥ th·ªÉ nh·∫≠n t·ª´</span>
                    </Space>
                  }
                  style={{ borderColor: '#1890ff' }}
                >
                  <Space direction="vertical" style={{ width: '100%' }}>
                    {getBloodTypeDetails(selectedBloodType).canReceiveFrom.map((type, index) => (
                      <Tag key={index} color="blue" style={{ margin: '2px' }}>
                        {type}
                      </Tag>
                    ))}
                  </Space>
                </Card>
              </Col>
            </Row>

            <Divider />

            <div style={{ textAlign: 'center', padding: '16px', background: '#f6f6f6', borderRadius: '8px' }}>
              <SafetyOutlined style={{ fontSize: '24px', color: '#52c41a', marginBottom: '8px' }} />
              <br />
              <Text strong>L∆∞u √Ω quan tr·ªçng</Text>
              <br />
              <Text style={{ fontSize: '12px', color: '#666' }}>
                Th√¥ng tin n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Trong th·ª±c t·∫ø, vi·ªác truy·ªÅn m√°u 
                c·∫ßn ƒë∆∞·ª£c th·ª±c hi·ªán theo ƒë√∫ng quy tr√¨nh y t·∫ø v√† ki·ªÉm tra ch√©o t·∫°i b·ªánh vi·ªán.
              </Text>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default BloodTypesSection;
