import React, { useState, useEffect, useContext } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';
import { GoogleLogin } from '@react-oauth/google';
import PandaLoginForm from '../../components/PandaLoginForm/PandaLoginForm.jsx';
import './Login.css';
import { AuthContext } from '../../contexts/AuthContext.jsx';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [popupMessage, setPopupMessage] = useState('');
  const navigate = useNavigate();
  const location = useLocation();

  const { login } = useContext(AuthContext);

  useEffect(() => {
    if (location.state && location.state.error) {
      setPopupMessage(location.state.error);
      window.history.replaceState({}, document.title);
    }
  }, [location]);

  const handleLogin = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post('http://localhost:8080/api/auth/login', {
        email,
        password,
      });

      const data = response.data;
      console.log('‚úÖ Login response:', data);

      const success =
        data.success === true || data.message?.toLowerCase().includes('th√†nh c√¥ng');

      if (success) {
        setErrorMessage('');
        console.log('üîê G·ªçi login():', data.user);
        login(data); // L∆∞u user v√†o context/auth

        // ƒêi·ªÅu h∆∞·ªõng theo vai tr√≤
        const role = data.role;
        switch (role) {
          case 'Quan_Tri_Vien':
            console.log('üöÄ ƒêi·ªÅu h∆∞·ªõng t·ªõi: /adminDashboard');
            navigate('/adminDashboard');
            break;
          case 'staff':
            console.log('üöÄ ƒêi·ªÅu h∆∞·ªõng t·ªõi: /dashboardStaff');
            navigate('/dashboardStaff');
            break;
          default:
            console.log('üöÄ ƒêi·ªÅu h∆∞·ªõng t·ªõi: /home');
            navigate('/home');
        }
      } else {
        setErrorMessage(data.message || 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
        console.warn('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', data.message);
      }
    } catch (error) {
      if (error.response) {
        console.error('‚ùå Server response error:', error.response.data);
        setErrorMessage(error.response.data.message || 'L·ªói ƒëƒÉng nh·∫≠p t·ª´ server');
      } else if (error.request) {
        console.error('‚ùå No server response:', error.request);
        setErrorMessage('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server');
      } else {
        console.error('‚ùå Unexpected error:', error.message);
        setErrorMessage('L·ªói k·∫øt n·ªëi t·ªõi server, vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  const responseGoogleSuccess = async (credentialResponse) => {
    console.log('‚úÖ Google login th√†nh c√¥ng:', credentialResponse);
  
    const token = credentialResponse.credential;  // L·∫•y token t·ª´ Google login
  
    try {
      const response = await axios.post('http://localhost:8080/api/auth/google-login', { token });
  
      const data = response.data;
      console.log('‚úÖ ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng:', data);
  
      if (data.success) {
        // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o AuthContext
        login(data.user);  // Gi·∫£ s·ª≠ b·∫°n c√≥ h√†m login trong AuthContext
  
        // ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng d·ª±a tr√™n vai tr√≤
        const role = data.user.role;
        switch (role) {
          case 'Quan_Tri_Vien':
            navigate('/adminDashboard');
            break;
          case 'staff':
            navigate('/dashboardStaff');
            break;
          default:
            navigate('/home');
        }
      } else {
        alert('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i!');
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω ƒëƒÉng nh·∫≠p Google:', error);
      alert('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i!');
    }
  };
  

  const responseGoogleFailure = (error) => {
    console.error('‚ùå Google login th·∫•t b·∫°i:', error);
    alert('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i!');
  };
  

  return (
    <div className="login-banner-container">
      {popupMessage && (
        <div className="popup">
          <p>{popupMessage}</p>
          <button onClick={() => setPopupMessage('')}>ƒê√≥ng</button>
        </div>
      )}

      <div className="login-banner-left">
        <img src="/Banner-log.jpg" alt="Login Banner" className="login-banner-image" />
        <div className="login-banner-text">
          <h1>Welcome Back!</h1>
          <p>ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c tr·∫£i nghi·ªám h·ªá th·ªëng</p>
        </div>
      </div>

      <div className="login-banner-right">
        <PandaLoginForm
          email={email}
          password={password}
          onEmailChange={e => setEmail(e.target.value)}
          onPasswordChange={e => setPassword(e.target.value)}
          onSubmit={handleLogin}
          errorMessage={errorMessage}
        />

        <div style={{ textAlign: 'center', marginTop: '15px', width: '100%' }}>
          <div className="divider">
            <span></span>
            <p>ho·∫∑c</p>
            <span></span>
          </div>

          <GoogleLogin
            onSuccess={responseGoogleSuccess}
            onError={responseGoogleFailure}
          />

          <p style={{ marginTop: '10px' }}>
            Ch∆∞a c√≥ t√†i kho·∫£n? <Link to="/signup">ƒêƒÉng k√Ω ngay</Link>
          </p>
        </div>

        <div className="backHome-button">
          <Link to="/" className="backHome-link">
            <button className="backHome-btn">Quay v·ªÅ trang ch·ªß</button>
          </Link>
        </div>
      </div>
    </div>
  );
}
